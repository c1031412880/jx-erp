# Vue.js ERP项目 Cursor Rules

## 项目概述
这是一个基于Vue 2的企业资源规划(ERP)系统，包含物料管理、人员管理、维护管理等多个业务模块。

## 技术栈
- Vue 2.x
- Element UI
- Vuex (状态管理)
- Vue Router
- Axios (HTTP请求)
- ECharts (图表)
- TinyMCE (富文本编辑器)
- SignalR (实时通信)

## 代码规范

### Vue组件规范
- 使用单文件组件(.vue)格式
- 组件名使用PascalCase命名
- 文件名使用kebab-case命名
- 组件内部结构顺序：template -> script -> style

### JavaScript规范
- 使用ES6+语法
- 优先使用const/let，避免var
- 函数命名使用camelCase
- 常量使用UPPER_SNAKE_CASE
- 添加详细的JSDoc注释

### CSS/SCSS规范
- 使用SCSS预处理器
- 类名使用BEM命名规范
- 避免使用!important
- 使用CSS变量定义主题色彩

### 表格页面样式规范
- **主页面样式**: 使用Stylus预处理器，主容器只设置基本宽高(width: 100%, height: 100%)，去除卡片风格装饰
- **查询条件样式**: 背景色#f5f7fa，底部边框1px solid #e6e6e6，内边距8px 12px
- **组件间距**: 表单项margin-right: 10px，按钮margin-left: 8px，首尾项为0
- **控件尺寸**: 日期选择器max-width: 300px，下拉选择器min-width: 180px
- **日期范围分隔符**: 使用"-"代替"至"，避免显示不全问题(range-separator="-")
- **模板结构**: 查询条件使用简单div包装，主页面直接包含查询组件和表格组件
- **参考标准**: 以分公司材料领用报表样式为准，保持简洁扁平的设计风格

### API请求规范
- 所有API请求统一通过src/api/目录管理
- 使用async/await处理异步请求
- 统一错误处理和loading状态管理
- API方法命名清晰，包含动作和资源名

## 项目结构规范

### 目录结构
```
src/
├── api/           # API接口管理
├── assets/        # 静态资源
├── components/    # 通用组件
├── layout/        # 布局组件
├── router/        # 路由配置
├── store/         # Vuex状态管理
├── utils/         # 工具函数
├── view/          # 页面组件
└── styles/        # 全局样式
```

### 组件分类
- **通用组件**: 放在components/目录，可复用
- **页面组件**: 放在view/目录，按业务模块分类
- **布局组件**: 放在layout/目录

## 开发最佳实践

### Vue组件开发
- 合理使用props验证和默认值
- 使用computed属性处理派生数据
- 避免在template中写复杂逻辑
- 使用$emit进行父子组件通信
- 合理使用生命周期钩子

### 状态管理
- 使用Vuex管理全局状态
- 模块化store，按业务划分
- 使用getters处理状态派生
- 异步操作放在actions中

### 路由管理
- 使用路由懒加载优化性能
- 合理使用路由守卫
- 动态路由配置支持权限控制

### 性能优化
- 使用v-if/v-show合理控制DOM渲染
- 大列表使用虚拟滚动
- 图片懒加载
- 组件按需加载

## 错误处理
- 统一的错误处理机制
- 用户友好的错误提示
- 错误日志记录
- 网络异常处理

## 安全规范
- 输入验证和sanitization
- XSS防护
- CSRF防护
- 敏感信息加密

## 代码质量
- 保持代码简洁和可读性
- 添加必要的注释
- 遵循单一职责原则
- 避免深层嵌套

## 特定业务规范

### 表单处理
- 使用Element UI表单组件
- 统一的表单验证规则
- 表单数据格式化
- 提交前数据校验

### 表格组件
- 使用Element UI表格组件
- 支持排序、筛选、分页
- 表格数据懒加载
- 导出功能统一处理
- 遵循表格页面样式规范，使用简洁扁平的设计风格

### 文件上传
- 统一的文件上传组件
- 文件类型和大小限制
- 上传进度显示
- 错误处理

### 权限控制
- 基于角色的权限控制
- 页面级和组件级权限
- 动态菜单生成
- 按钮级权限控制

## 注释规范
- 组件顶部添加组件说明
- 复杂逻辑添加注释
- API接口添加参数说明
- 工具函数添加使用示例

## 测试规范
- 单元测试覆盖核心业务逻辑
- 组件测试覆盖用户交互
- E2E测试覆盖关键业务流程

## 部署规范
- 环境变量配置
- 构建优化
- 静态资源CDN
- 容器化部署

记住：始终优先考虑代码可读性、可维护性和用户体验。 